import { createSlice } from "@reduxjs/toolkit";
import { User } from "../models/User";
import type { PayloadAction } from "@reduxjs/toolkit";

/**
 * Interface representing the authentication state.
 * @property {User | null} user - The user object or null if not authenticated.
 */
export interface AuthState {
  user: null | User;
}

/**
 * Initial state for the authentication slice.
 * @type {AuthState}
 */
const initialState: AuthState = { user: null };

/**
 * Redux slice for managing authentication state.
 * Includes actions for login and logout.
 */
export const authSlice = createSlice({
  name: "Auth",
  initialState,
  reducers: {
    /**
     * Action to update the state with the user information upon login.
     * @param {AuthState} state - The current authentication state.
     * @param {PayloadAction<User>} action - Payload containing user information.
     */
    login: (state, action: PayloadAction<User>) => {
      state.user = action.payload;
    },

    /**
     * Action to update the state by setting the user to null upon logout.
     * @param {AuthState} state - The current authentication state.
     */
    logout: (state) => {
      state.user = null;
    },
  },
});

/**
 * Action creators generated by the authSlice for login and logout.
 */
export const { login, logout } = authSlice.actions;

/**
 * Reducer function generated by the authSlice.
 * Handles state updates based on dispatched actions.
 * @type {Reducer<AuthState>}
 */
export default authSlice.reducer;
